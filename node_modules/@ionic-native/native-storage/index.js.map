{"version":3,"sources":["../../../src/@ionic-native/plugins/native-storage/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAGxE;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AASH,IAAa,aAAa;IAAS,iCAAiB;IAApD;;IA8CA,CAAC;IA7CC;;;;;OAKG;IAEH,+BAAO,GAAP,UAAQ,SAAiB,EAAE,KAAU,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEhE;;;;OAIG;IAEH,+BAAO,GAAP,UAAQ,SAAiB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEpD;;;OAGG;IAEH,4BAAI,GAAJ,cAAuB,MAAM,CAAC,CAAC,CAAC;IAEhC;;;;OAIG;IAEH,8BAAM,GAAN,UAAO,SAAiB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEnD;;;OAGG;IAEH,6BAAK,GAAL,cAAwB,MAAM,CAAC,CAAC,CAAC;IAQnC,oBAAC;AAAD,CA9CA,AA8CC,CA9CkC,iBAAiB,GA8CnD;AANM,wBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AArCA;IADC,OAAO,EAAE;;;;4CACsD;AAQhE;IADC,OAAO,EAAE;;;;4CAC0C;AAOpD;IADC,OAAO,EAAE;;;;yCACsB;AAQhC;IADC,OAAO,EAAE;;;;2CACyC;AAOnD;IADC,OAAO,EAAE;;;;0CACuB;AAtCtB,aAAa;IARzB,MAAM,CAAC;QACN,UAAU,EAAE,eAAe;QAC3B,MAAM,EAAE,8BAA8B;QACtC,SAAS,EAAE,eAAe;QAC1B,IAAI,EAAE,iEAAiE;QACvE,SAAS,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC;KAC7D,CAAC;GAEW,aAAa,CA8CzB;SA9CY,aAAa","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\n\n/**\n * @name Native Storage\n * @description Native storage of variables in Android and iOS\n *\n * @usage\n * ```typescript\n * import { NativeStorage } from '@ionic-native/native-storage';\n *\n * constructor(private nativeStorage: NativeStorage) { }\n *\n * ...\n *\n * this.nativeStorage.setItem('myitem', {property: 'value', anotherProperty: 'anotherValue'})\n *   .then(\n *     () => console.log('Stored item!'),\n *     error => console.error('Error storing item', error)\n *   );\n *\n * this.nativeStorage.getItem('myitem')\n *   .then(\n *     data => console.log(data),\n *     error => console.error(error)\n *   );\n * ```\n */\n@Plugin({\n  pluginName: 'NativeStorage',\n  plugin: 'cordova-plugin-nativestorage',\n  pluginRef: 'NativeStorage',\n  repo: 'https://github.com/TheCocoaProject/cordova-plugin-nativestorage',\n  platforms: ['Android', 'Browser', 'iOS', 'macOS', 'Windows']\n})\n\nexport class NativeStorage extends IonicNativePlugin {\n  /**\n   * Stores a value\n   * @param reference {string}\n   * @param value\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  setItem(reference: string, value: any): Promise<any> { return; }\n\n  /**\n   * Gets a stored item\n   * @param reference {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  getItem(reference: string): Promise<any> { return; }\n\n  /**\n   * Retrieving all keys\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  keys(): Promise<any> { return; }\n\n  /**\n   * Removes a single stored item\n   * @param reference {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  remove(reference: string): Promise<any> { return; }\n\n  /**\n   * Removes all stored values.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  clear(): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}