{"version":3,"sources":["../../../src/@ionic-native/plugins/social-sharing/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\n\n/**\n * @name Social Sharing\n * @description\n * Share text, files, images, and links via social networks, sms, and email.\n *\n * For Browser usage check out the Web Share API docs: https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin#web-share-api\n *\n * @usage\n * ```typescript\n * import { SocialSharing } from '@ionic-native/social-sharing';\n *\n * constructor(private socialSharing: SocialSharing) { }\n *\n * ...\n *\n * // Check if sharing via email is supported\n * this.socialSharing.canShareViaEmail().then(() => {\n *   // Sharing via email is possible\n * }).catch(() => {\n *   // Sharing via email is not possible\n * });\n *\n * // Share via email\n * this.socialSharing.shareViaEmail('Body', 'Subject', ['recipient@example.org']).then(() => {\n *   // Success!\n * }).catch(() => {\n *   // Error!\n * });\n * ```\n */\n@Plugin({\n  pluginName: 'SocialSharing',\n  plugin: 'cordova-plugin-x-socialsharing',\n  pluginRef: 'plugins.socialsharing',\n  repo: 'https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin',\n  platforms: ['Android', 'Browser', 'iOS', 'Windows', 'Windows Phone']\n})\n\nexport class SocialSharing extends IonicNativePlugin {\n  /**\n   * Shares using the share sheet\n   * @param message {string} The message you would like to share.\n   * @param subject {string} The subject\n   * @param file {string|string[]} URL(s) to file(s) or image(s), local path(s) to file(s) or image(s), or base64 data of an image. Only the first file/image will be used on Windows Phone.\n   * @param url {string} A URL to share\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 4,\n    errorIndex: 5\n  })\n  share(message?: string, subject?: string, file?: string | string[], url?: string): Promise<any> { return; }\n\n  /**\n   * Shares using the share sheet with additional options and returns a result object or an error message (requires plugin version 5.1.0+)\n   * @param options {object} The options object with the message, subject, files, url and chooserTitle properties.\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS', 'Android']\n  })\n  shareWithOptions(options: { message?: string, subject?: string, files?: string | string[], url?: string, chooserTitle?: string }): Promise<any> { return; }\n\n  /**\n   * Checks if you can share via a specific app.\n   * @param appName {string} App name or package name. Examples: instagram or com.apple.social.facebook\n   * @param message {string}\n   * @param subject {string}\n   * @param image {string}\n   * @param url {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 5,\n    errorIndex: 6,\n    platforms: ['iOS', 'Android']\n  })\n  canShareVia(appName: string, message?: string, subject?: string, image?: string, url?: string): Promise<any> { return; }\n\n  /**\n   * Shares directly to Twitter\n   * @param message {string}\n   * @param image {string}\n   * @param url {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 3,\n    errorIndex: 4,\n    platforms: ['iOS', 'Android']\n  })\n  shareViaTwitter(message: string, image?: string, url?: string): Promise<any> { return; }\n\n  /**\n   * Shares directly to Facebook\n   * @param message {string}\n   * @param image {string}\n   * @param url {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 3,\n    errorIndex: 4,\n    platforms: ['iOS', 'Android']\n  })\n  shareViaFacebook(message: string, image?: string, url?: string): Promise<any> { return; }\n\n\n  /**\n   * Shares directly to Facebook with a paste message hint\n   * @param message {string}\n   * @param image {string}\n   * @param url {string}\n   * @param pasteMessageHint {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 4,\n    errorIndex: 5,\n    platforms: ['iOS', 'Android']\n  })\n  shareViaFacebookWithPasteMessageHint(message: string, image?: string, url?: string, pasteMessageHint?: string): Promise<any> { return; }\n\n  /**\n   * Shares directly to Instagram\n   * @param message {string}\n   * @param image {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS', 'Android']\n  })\n  shareViaInstagram(message: string, image: string): Promise<any> { return; }\n\n  /**\n   * Shares directly to WhatsApp\n   * @param message {string}\n   * @param image {string}\n   * @param url {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 3,\n    errorIndex: 4,\n    platforms: ['iOS', 'Android']\n  })\n  shareViaWhatsApp(message: string, image?: string, url?: string): Promise<any> { return; }\n\n  /**\n   * Shares directly to a WhatsApp Contact\n   * @param receiver {string} Pass phone number on Android, and Addressbook ID (abid) on iOS\n   * @param message {string} Message to send\n   * @param image {string} Image to send (does not work on iOS\n   * @param url {string} Link to send\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 4,\n    errorIndex: 5,\n    platforms: ['iOS', 'Android']\n  })\n  shareViaWhatsAppToReceiver(receiver: string, message: string, image?: string, url?: string): Promise<any> { return; }\n\n  /**\n   * Share via SMS\n   * @param messge {string} message to send\n   * @param phoneNumber {string} Number or multiple numbers seperated by commas\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS', 'Android']\n  })\n  shareViaSMS(messge: string, phoneNumber: string): Promise<any> { return; }\n\n  /**\n   * Checks if you can share via email\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS', 'Android']\n  })\n  canShareViaEmail(): Promise<any> { return; }\n\n  /**\n   * Share via Email\n   * @param message {string}\n   * @param subject {string}\n   * @param to {string[]}\n   * @param cc {string[]} Optional\n   * @param bcc {string[]} Optional\n   * @param files {string|string[]} Optional URL or local path to file(s) to attach\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS', 'Android'],\n    successIndex: 6,\n    errorIndex: 7\n  })\n  shareViaEmail(message: string, subject: string, to: string[], cc?: string[], bcc?: string[], files?: string | string[]): Promise<any> { return; }\n\n  /**\n   * Share via AppName\n   * @param appName {string} App name or package name. Examples: instagram or com.apple.social.facebook\n   * @param message {string}\n   * @param subject {string}\n   * @param image {string}\n   * @param url {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 5,\n    errorIndex: 6,\n    platforms: ['iOS', 'Android']\n  })\n  shareVia(appName: string, message: string, subject?: string, image?: string, url?: string): Promise<any> { return; }\n\n  /**\n   * defines the popup position before call the share method.\n   * @param targetBounds {string} left, top, width, height\n   */\n  @Cordova({\n    sync: true,\n    platforms: ['iOS']\n  })\n  setIPadPopupCoordinates(targetBounds: string): void { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}